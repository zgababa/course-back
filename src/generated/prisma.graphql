# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Cart implements Node {
  id: ID!
  categoriesSelected(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
}

type Category implements Node {
  id: ID!
  title: String!
  url: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type NutritionProfile implements Node {
  id: ID!
  quality(where: NutritionProfilePriceWhereInput): NutritionProfilePrice!
  famous(where: NutritionProfileFamousWhereInput): NutritionProfileFamous!
  bio(where: NutritionProfileBioWhereInput): NutritionProfileBio!
  healthy(where: NutritionProfileHealthyWhereInput): NutritionProfileHealthy!
}

type NutritionProfileBio implements Node {
  id: ID!
  quantityOrBio: Boolean!
}

type NutritionProfileFamous implements Node {
  id: ID!
  quantityOrFamous: Boolean!
}

type NutritionProfileHealthy implements Node {
  id: ID!
  quantityOrHealthy: Boolean!
}

type NutritionProfilePrice implements Node {
  id: ID!
  quantityOrQuality: Boolean!
}

type Product implements Node {
  id: ID!
  title: String!
  url: String!
  imageUrl: String!
  price: Float
  pricePerKilo: Float
  category(where: CategoryWhereInput): Category
}

type User implements Node {
  id: ID!
  gender: Gender!
  weeklyBudget: Int!
  age: Int!
  cooking: Boolean!
  nutritionProfile(where: NutritionProfileWhereInput): NutritionProfile!
}


#
# Other Types
#

type AggregateCart {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateNutritionProfile {
  count: Int!
}

type AggregateNutritionProfileBio {
  count: Int!
}

type AggregateNutritionProfileFamous {
  count: Int!
}

type AggregateNutritionProfileHealthy {
  count: Int!
}

type AggregateNutritionProfilePrice {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CartConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  categoriesSelected: CategoryCreateManyInput
}

"""
An edge in a connection.
"""
type CartEdge {
  """
  The item at the end of the edge.
  """
  node: Cart!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CartOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CartPreviousValues {
  id: ID!
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CartSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CartSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartWhereInput
}

input CartUpdateInput {
  categoriesSelected: CategoryUpdateManyInput
}

input CartWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CartWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CartWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  categoriesSelected_every: CategoryWhereInput
  categoriesSelected_some: CategoryWhereInput
  categoriesSelected_none: CategoryWhereInput
}

input CartWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  title: String!
  url: String!
  products: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductsInput {
  title: String!
  url: String!
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
  url: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategorySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CategorySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  title: String
  url: String
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateInput {
  title: String
  url: String
  products: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
}

input CategoryUpdateOneWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CategoryUpdateWithoutProductsDataInput
  upsert: CategoryUpsertWithoutProductsInput
}

input CategoryUpdateWithoutProductsDataInput {
  title: String
  url: String
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpsertWithoutProductsInput {
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategoryWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CategoryWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  createCategory(data: CategoryCreateInput!): Category!
  createCart(data: CartCreateInput!): Cart!
  createUser(data: UserCreateInput!): User!
  createNutritionProfile(data: NutritionProfileCreateInput!): NutritionProfile!
  createNutritionProfilePrice(data: NutritionProfilePriceCreateInput!): NutritionProfilePrice!
  createNutritionProfileFamous(data: NutritionProfileFamousCreateInput!): NutritionProfileFamous!
  createNutritionProfileBio(data: NutritionProfileBioCreateInput!): NutritionProfileBio!
  createNutritionProfileHealthy(data: NutritionProfileHealthyCreateInput!): NutritionProfileHealthy!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateNutritionProfile(data: NutritionProfileUpdateInput!, where: NutritionProfileWhereUniqueInput!): NutritionProfile
  updateNutritionProfilePrice(data: NutritionProfilePriceUpdateInput!, where: NutritionProfilePriceWhereUniqueInput!): NutritionProfilePrice
  updateNutritionProfileFamous(data: NutritionProfileFamousUpdateInput!, where: NutritionProfileFamousWhereUniqueInput!): NutritionProfileFamous
  updateNutritionProfileBio(data: NutritionProfileBioUpdateInput!, where: NutritionProfileBioWhereUniqueInput!): NutritionProfileBio
  updateNutritionProfileHealthy(data: NutritionProfileHealthyUpdateInput!, where: NutritionProfileHealthyWhereUniqueInput!): NutritionProfileHealthy
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteUser(where: UserWhereUniqueInput!): User
  deleteNutritionProfile(where: NutritionProfileWhereUniqueInput!): NutritionProfile
  deleteNutritionProfilePrice(where: NutritionProfilePriceWhereUniqueInput!): NutritionProfilePrice
  deleteNutritionProfileFamous(where: NutritionProfileFamousWhereUniqueInput!): NutritionProfileFamous
  deleteNutritionProfileBio(where: NutritionProfileBioWhereUniqueInput!): NutritionProfileBio
  deleteNutritionProfileHealthy(where: NutritionProfileHealthyWhereUniqueInput!): NutritionProfileHealthy
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertNutritionProfile(where: NutritionProfileWhereUniqueInput!, create: NutritionProfileCreateInput!, update: NutritionProfileUpdateInput!): NutritionProfile!
  upsertNutritionProfilePrice(where: NutritionProfilePriceWhereUniqueInput!, create: NutritionProfilePriceCreateInput!, update: NutritionProfilePriceUpdateInput!): NutritionProfilePrice!
  upsertNutritionProfileFamous(where: NutritionProfileFamousWhereUniqueInput!, create: NutritionProfileFamousCreateInput!, update: NutritionProfileFamousUpdateInput!): NutritionProfileFamous!
  upsertNutritionProfileBio(where: NutritionProfileBioWhereUniqueInput!, create: NutritionProfileBioCreateInput!, update: NutritionProfileBioUpdateInput!): NutritionProfileBio!
  upsertNutritionProfileHealthy(where: NutritionProfileHealthyWhereUniqueInput!, create: NutritionProfileHealthyCreateInput!, update: NutritionProfileHealthyUpdateInput!): NutritionProfileHealthy!
  updateManyProducts(data: ProductUpdateInput!, where: ProductWhereInput!): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput!): BatchPayload!
  updateManyCarts(data: CartUpdateInput!, where: CartWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyNutritionProfiles(data: NutritionProfileUpdateInput!, where: NutritionProfileWhereInput!): BatchPayload!
  updateManyNutritionProfilePrices(data: NutritionProfilePriceUpdateInput!, where: NutritionProfilePriceWhereInput!): BatchPayload!
  updateManyNutritionProfileFamouses(data: NutritionProfileFamousUpdateInput!, where: NutritionProfileFamousWhereInput!): BatchPayload!
  updateManyNutritionProfileBios(data: NutritionProfileBioUpdateInput!, where: NutritionProfileBioWhereInput!): BatchPayload!
  updateManyNutritionProfileHealthies(data: NutritionProfileHealthyUpdateInput!, where: NutritionProfileHealthyWhereInput!): BatchPayload!
  deleteManyProducts(where: ProductWhereInput!): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput!): BatchPayload!
  deleteManyCarts(where: CartWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyNutritionProfiles(where: NutritionProfileWhereInput!): BatchPayload!
  deleteManyNutritionProfilePrices(where: NutritionProfilePriceWhereInput!): BatchPayload!
  deleteManyNutritionProfileFamouses(where: NutritionProfileFamousWhereInput!): BatchPayload!
  deleteManyNutritionProfileBios(where: NutritionProfileBioWhereInput!): BatchPayload!
  deleteManyNutritionProfileHealthies(where: NutritionProfileHealthyWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type NutritionProfileBioConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NutritionProfileBioEdge]!
  aggregate: AggregateNutritionProfileBio!
}

input NutritionProfileBioCreateInput {
  quantityOrBio: Boolean!
}

input NutritionProfileBioCreateOneInput {
  create: NutritionProfileBioCreateInput
  connect: NutritionProfileBioWhereUniqueInput
}

"""
An edge in a connection.
"""
type NutritionProfileBioEdge {
  """
  The item at the end of the edge.
  """
  node: NutritionProfileBio!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NutritionProfileBioOrderByInput {
  id_ASC
  id_DESC
  quantityOrBio_ASC
  quantityOrBio_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NutritionProfileBioPreviousValues {
  id: ID!
  quantityOrBio: Boolean!
}

type NutritionProfileBioSubscriptionPayload {
  mutation: MutationType!
  node: NutritionProfileBio
  updatedFields: [String!]
  previousValues: NutritionProfileBioPreviousValues
}

input NutritionProfileBioSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileBioSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileBioSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NutritionProfileBioWhereInput
}

input NutritionProfileBioUpdateDataInput {
  quantityOrBio: Boolean
}

input NutritionProfileBioUpdateInput {
  quantityOrBio: Boolean
}

input NutritionProfileBioUpdateOneInput {
  create: NutritionProfileBioCreateInput
  connect: NutritionProfileBioWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NutritionProfileBioUpdateDataInput
  upsert: NutritionProfileBioUpsertNestedInput
}

input NutritionProfileBioUpsertNestedInput {
  update: NutritionProfileBioUpdateDataInput!
  create: NutritionProfileBioCreateInput!
}

input NutritionProfileBioWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileBioWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileBioWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  quantityOrBio: Boolean
  """
  All values that are not equal to given value.
  """
  quantityOrBio_not: Boolean
}

input NutritionProfileBioWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type NutritionProfileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NutritionProfileEdge]!
  aggregate: AggregateNutritionProfile!
}

input NutritionProfileCreateInput {
  quality: NutritionProfilePriceCreateOneInput!
  famous: NutritionProfileFamousCreateOneInput!
  bio: NutritionProfileBioCreateOneInput!
  healthy: NutritionProfileHealthyCreateOneInput!
}

input NutritionProfileCreateOneInput {
  create: NutritionProfileCreateInput
  connect: NutritionProfileWhereUniqueInput
}

"""
An edge in a connection.
"""
type NutritionProfileEdge {
  """
  The item at the end of the edge.
  """
  node: NutritionProfile!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type NutritionProfileFamousConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NutritionProfileFamousEdge]!
  aggregate: AggregateNutritionProfileFamous!
}

input NutritionProfileFamousCreateInput {
  quantityOrFamous: Boolean!
}

input NutritionProfileFamousCreateOneInput {
  create: NutritionProfileFamousCreateInput
  connect: NutritionProfileFamousWhereUniqueInput
}

"""
An edge in a connection.
"""
type NutritionProfileFamousEdge {
  """
  The item at the end of the edge.
  """
  node: NutritionProfileFamous!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NutritionProfileFamousOrderByInput {
  id_ASC
  id_DESC
  quantityOrFamous_ASC
  quantityOrFamous_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NutritionProfileFamousPreviousValues {
  id: ID!
  quantityOrFamous: Boolean!
}

type NutritionProfileFamousSubscriptionPayload {
  mutation: MutationType!
  node: NutritionProfileFamous
  updatedFields: [String!]
  previousValues: NutritionProfileFamousPreviousValues
}

input NutritionProfileFamousSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileFamousSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileFamousSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NutritionProfileFamousWhereInput
}

input NutritionProfileFamousUpdateDataInput {
  quantityOrFamous: Boolean
}

input NutritionProfileFamousUpdateInput {
  quantityOrFamous: Boolean
}

input NutritionProfileFamousUpdateOneInput {
  create: NutritionProfileFamousCreateInput
  connect: NutritionProfileFamousWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NutritionProfileFamousUpdateDataInput
  upsert: NutritionProfileFamousUpsertNestedInput
}

input NutritionProfileFamousUpsertNestedInput {
  update: NutritionProfileFamousUpdateDataInput!
  create: NutritionProfileFamousCreateInput!
}

input NutritionProfileFamousWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileFamousWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileFamousWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  quantityOrFamous: Boolean
  """
  All values that are not equal to given value.
  """
  quantityOrFamous_not: Boolean
}

input NutritionProfileFamousWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type NutritionProfileHealthyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NutritionProfileHealthyEdge]!
  aggregate: AggregateNutritionProfileHealthy!
}

input NutritionProfileHealthyCreateInput {
  quantityOrHealthy: Boolean!
}

input NutritionProfileHealthyCreateOneInput {
  create: NutritionProfileHealthyCreateInput
  connect: NutritionProfileHealthyWhereUniqueInput
}

"""
An edge in a connection.
"""
type NutritionProfileHealthyEdge {
  """
  The item at the end of the edge.
  """
  node: NutritionProfileHealthy!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NutritionProfileHealthyOrderByInput {
  id_ASC
  id_DESC
  quantityOrHealthy_ASC
  quantityOrHealthy_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NutritionProfileHealthyPreviousValues {
  id: ID!
  quantityOrHealthy: Boolean!
}

type NutritionProfileHealthySubscriptionPayload {
  mutation: MutationType!
  node: NutritionProfileHealthy
  updatedFields: [String!]
  previousValues: NutritionProfileHealthyPreviousValues
}

input NutritionProfileHealthySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileHealthySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileHealthySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NutritionProfileHealthyWhereInput
}

input NutritionProfileHealthyUpdateDataInput {
  quantityOrHealthy: Boolean
}

input NutritionProfileHealthyUpdateInput {
  quantityOrHealthy: Boolean
}

input NutritionProfileHealthyUpdateOneInput {
  create: NutritionProfileHealthyCreateInput
  connect: NutritionProfileHealthyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NutritionProfileHealthyUpdateDataInput
  upsert: NutritionProfileHealthyUpsertNestedInput
}

input NutritionProfileHealthyUpsertNestedInput {
  update: NutritionProfileHealthyUpdateDataInput!
  create: NutritionProfileHealthyCreateInput!
}

input NutritionProfileHealthyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileHealthyWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileHealthyWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  quantityOrHealthy: Boolean
  """
  All values that are not equal to given value.
  """
  quantityOrHealthy_not: Boolean
}

input NutritionProfileHealthyWhereUniqueInput {
  id: ID
}

enum NutritionProfileOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NutritionProfilePreviousValues {
  id: ID!
}

"""
A connection to a list of items.
"""
type NutritionProfilePriceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [NutritionProfilePriceEdge]!
  aggregate: AggregateNutritionProfilePrice!
}

input NutritionProfilePriceCreateInput {
  quantityOrQuality: Boolean!
}

input NutritionProfilePriceCreateOneInput {
  create: NutritionProfilePriceCreateInput
  connect: NutritionProfilePriceWhereUniqueInput
}

"""
An edge in a connection.
"""
type NutritionProfilePriceEdge {
  """
  The item at the end of the edge.
  """
  node: NutritionProfilePrice!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum NutritionProfilePriceOrderByInput {
  id_ASC
  id_DESC
  quantityOrQuality_ASC
  quantityOrQuality_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NutritionProfilePricePreviousValues {
  id: ID!
  quantityOrQuality: Boolean!
}

type NutritionProfilePriceSubscriptionPayload {
  mutation: MutationType!
  node: NutritionProfilePrice
  updatedFields: [String!]
  previousValues: NutritionProfilePricePreviousValues
}

input NutritionProfilePriceSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfilePriceSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfilePriceSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NutritionProfilePriceWhereInput
}

input NutritionProfilePriceUpdateDataInput {
  quantityOrQuality: Boolean
}

input NutritionProfilePriceUpdateInput {
  quantityOrQuality: Boolean
}

input NutritionProfilePriceUpdateOneInput {
  create: NutritionProfilePriceCreateInput
  connect: NutritionProfilePriceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NutritionProfilePriceUpdateDataInput
  upsert: NutritionProfilePriceUpsertNestedInput
}

input NutritionProfilePriceUpsertNestedInput {
  update: NutritionProfilePriceUpdateDataInput!
  create: NutritionProfilePriceCreateInput!
}

input NutritionProfilePriceWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfilePriceWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfilePriceWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  quantityOrQuality: Boolean
  """
  All values that are not equal to given value.
  """
  quantityOrQuality_not: Boolean
}

input NutritionProfilePriceWhereUniqueInput {
  id: ID
}

type NutritionProfileSubscriptionPayload {
  mutation: MutationType!
  node: NutritionProfile
  updatedFields: [String!]
  previousValues: NutritionProfilePreviousValues
}

input NutritionProfileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NutritionProfileWhereInput
}

input NutritionProfileUpdateDataInput {
  quality: NutritionProfilePriceUpdateOneInput
  famous: NutritionProfileFamousUpdateOneInput
  bio: NutritionProfileBioUpdateOneInput
  healthy: NutritionProfileHealthyUpdateOneInput
}

input NutritionProfileUpdateInput {
  quality: NutritionProfilePriceUpdateOneInput
  famous: NutritionProfileFamousUpdateOneInput
  bio: NutritionProfileBioUpdateOneInput
  healthy: NutritionProfileHealthyUpdateOneInput
}

input NutritionProfileUpdateOneInput {
  create: NutritionProfileCreateInput
  connect: NutritionProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NutritionProfileUpdateDataInput
  upsert: NutritionProfileUpsertNestedInput
}

input NutritionProfileUpsertNestedInput {
  update: NutritionProfileUpdateDataInput!
  create: NutritionProfileCreateInput!
}

input NutritionProfileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [NutritionProfileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [NutritionProfileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  quality: NutritionProfilePriceWhereInput
  famous: NutritionProfileFamousWhereInput
  bio: NutritionProfileBioWhereInput
  healthy: NutritionProfileHealthyWhereInput
}

input NutritionProfileWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type ProductConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  url: String!
  imageUrl: String!
  price: Float
  pricePerKilo: Float
  category: CategoryCreateOneWithoutProductsInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutCategoryInput {
  title: String!
  url: String!
  imageUrl: String!
  price: Float
  pricePerKilo: Float
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  The item at the end of the edge.
  """
  node: Product!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  imageUrl_ASC
  imageUrl_DESC
  price_ASC
  price_DESC
  pricePerKilo_ASC
  pricePerKilo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  url: String!
  imageUrl: String!
  price: Float
  pricePerKilo: Float
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProductSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  title: String
  url: String
  imageUrl: String
  price: Float
  pricePerKilo: Float
  category: CategoryUpdateOneWithoutProductsInput
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateWithoutCategoryDataInput {
  title: String
  url: String
  imageUrl: String
  price: Float
  pricePerKilo: Float
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ProductWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ProductWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  imageUrl: String
  """
  All values that are not equal to given value.
  """
  imageUrl_not: String
  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  imageUrl_lt: String
  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String
  """
  All values greater than the given value.
  """
  imageUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String
  """
  All values containing the given string.
  """
  imageUrl_contains: String
  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String
  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  price: Float
  """
  All values that are not equal to given value.
  """
  price_not: Float
  """
  All values that are contained in given list.
  """
  price_in: [Float!]
  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]
  """
  All values less than the given value.
  """
  price_lt: Float
  """
  All values less than or equal the given value.
  """
  price_lte: Float
  """
  All values greater than the given value.
  """
  price_gt: Float
  """
  All values greater than or equal the given value.
  """
  price_gte: Float
  pricePerKilo: Float
  """
  All values that are not equal to given value.
  """
  pricePerKilo_not: Float
  """
  All values that are contained in given list.
  """
  pricePerKilo_in: [Float!]
  """
  All values that are not contained in given list.
  """
  pricePerKilo_not_in: [Float!]
  """
  All values less than the given value.
  """
  pricePerKilo_lt: Float
  """
  All values less than or equal the given value.
  """
  pricePerKilo_lte: Float
  """
  All values greater than the given value.
  """
  pricePerKilo_gt: Float
  """
  All values greater than or equal the given value.
  """
  pricePerKilo_gte: Float
  category: CategoryWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  nutritionProfiles(where: NutritionProfileWhereInput, orderBy: NutritionProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NutritionProfile]!
  nutritionProfilePrices(where: NutritionProfilePriceWhereInput, orderBy: NutritionProfilePriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NutritionProfilePrice]!
  nutritionProfileFamouses(where: NutritionProfileFamousWhereInput, orderBy: NutritionProfileFamousOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NutritionProfileFamous]!
  nutritionProfileBios(where: NutritionProfileBioWhereInput, orderBy: NutritionProfileBioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NutritionProfileBio]!
  nutritionProfileHealthies(where: NutritionProfileHealthyWhereInput, orderBy: NutritionProfileHealthyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NutritionProfileHealthy]!
  product(where: ProductWhereUniqueInput!): Product
  category(where: CategoryWhereUniqueInput!): Category
  cart(where: CartWhereUniqueInput!): Cart
  user(where: UserWhereUniqueInput!): User
  nutritionProfile(where: NutritionProfileWhereUniqueInput!): NutritionProfile
  nutritionProfilePrice(where: NutritionProfilePriceWhereUniqueInput!): NutritionProfilePrice
  nutritionProfileFamous(where: NutritionProfileFamousWhereUniqueInput!): NutritionProfileFamous
  nutritionProfileBio(where: NutritionProfileBioWhereUniqueInput!): NutritionProfileBio
  nutritionProfileHealthy(where: NutritionProfileHealthyWhereUniqueInput!): NutritionProfileHealthy
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  nutritionProfilesConnection(where: NutritionProfileWhereInput, orderBy: NutritionProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NutritionProfileConnection!
  nutritionProfilePricesConnection(where: NutritionProfilePriceWhereInput, orderBy: NutritionProfilePriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NutritionProfilePriceConnection!
  nutritionProfileFamousesConnection(where: NutritionProfileFamousWhereInput, orderBy: NutritionProfileFamousOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NutritionProfileFamousConnection!
  nutritionProfileBiosConnection(where: NutritionProfileBioWhereInput, orderBy: NutritionProfileBioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NutritionProfileBioConnection!
  nutritionProfileHealthiesConnection(where: NutritionProfileHealthyWhereInput, orderBy: NutritionProfileHealthyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NutritionProfileHealthyConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  nutritionProfile(where: NutritionProfileSubscriptionWhereInput): NutritionProfileSubscriptionPayload
  nutritionProfilePrice(where: NutritionProfilePriceSubscriptionWhereInput): NutritionProfilePriceSubscriptionPayload
  nutritionProfileFamous(where: NutritionProfileFamousSubscriptionWhereInput): NutritionProfileFamousSubscriptionPayload
  nutritionProfileBio(where: NutritionProfileBioSubscriptionWhereInput): NutritionProfileBioSubscriptionPayload
  nutritionProfileHealthy(where: NutritionProfileHealthySubscriptionWhereInput): NutritionProfileHealthySubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  gender: Gender!
  weeklyBudget: Int!
  age: Int!
  cooking: Boolean!
  nutritionProfile: NutritionProfileCreateOneInput!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  gender_ASC
  gender_DESC
  weeklyBudget_ASC
  weeklyBudget_DESC
  age_ASC
  age_DESC
  cooking_ASC
  cooking_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  gender: Gender!
  weeklyBudget: Int!
  age: Int!
  cooking: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  gender: Gender
  weeklyBudget: Int
  age: Int
  cooking: Boolean
  nutritionProfile: NutritionProfileUpdateOneInput
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  gender: Gender
  """
  All values that are not equal to given value.
  """
  gender_not: Gender
  """
  All values that are contained in given list.
  """
  gender_in: [Gender!]
  """
  All values that are not contained in given list.
  """
  gender_not_in: [Gender!]
  weeklyBudget: Int
  """
  All values that are not equal to given value.
  """
  weeklyBudget_not: Int
  """
  All values that are contained in given list.
  """
  weeklyBudget_in: [Int!]
  """
  All values that are not contained in given list.
  """
  weeklyBudget_not_in: [Int!]
  """
  All values less than the given value.
  """
  weeklyBudget_lt: Int
  """
  All values less than or equal the given value.
  """
  weeklyBudget_lte: Int
  """
  All values greater than the given value.
  """
  weeklyBudget_gt: Int
  """
  All values greater than or equal the given value.
  """
  weeklyBudget_gte: Int
  age: Int
  """
  All values that are not equal to given value.
  """
  age_not: Int
  """
  All values that are contained in given list.
  """
  age_in: [Int!]
  """
  All values that are not contained in given list.
  """
  age_not_in: [Int!]
  """
  All values less than the given value.
  """
  age_lt: Int
  """
  All values less than or equal the given value.
  """
  age_lte: Int
  """
  All values greater than the given value.
  """
  age_gt: Int
  """
  All values greater than or equal the given value.
  """
  age_gte: Int
  cooking: Boolean
  """
  All values that are not equal to given value.
  """
  cooking_not: Boolean
  nutritionProfile: NutritionProfileWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
