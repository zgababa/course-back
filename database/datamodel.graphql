type Product {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String!
  imageUrl: String!
  price: Float
  pricePerKilo: Float
  isCookedMeal: Boolean @default(value: "false")
  isMilkInside: Boolean @default(value: "false")
  isMeatInside: Boolean @default(value: "false")
  isEggInside: Boolean @default(value: "false")
  category: Category @relation(name: "CategoryOnProduct")
  qualityRate: Int # UPDATE Product SET qualityRate = FLOOR( 1 + RAND( ) *5 );
  priceQualityRatio: Float #UPDATE Product SET priceQualityRatio = (qualityRate / price )

  _uselessAllowedProducts: UserProduct @relation(name: "UserProductAllowed")
  _uselessForbiddenProducts: UserProduct @relation(name: "UserProductForbidden")
  _uselessExcludedProducts: CartProduct @relation(name: "RelationCartProductExcluded")
}

type Category {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String!
  products: [Product!]! @relation(name: "CategoryOnProduct")
}

type Cart {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  selectedCategories: [Category!]! @relation(name: "CategoryOnCart") # renvoie un tableau de cat√©gories
  duration: Int!
  user: User! @relation(name: "UserOnCart")
  products: CartProduct
}

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # specify to graphql-authentication
  email: String! @unique
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean! @default(value: "true")
  emailConfirmed: Boolean! @default(value: "true")
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean! @default(value: "false")
  role: Role @default(value: USER)

  gender: Gender @default(value: MALE)
  weeklyBudget: Int @default(value: 60)
  age: Int
  isCooking: Boolean
  isLactoseIntolerant: Boolean
  isVegetarien: Boolean
  isVegetalien: Boolean
  falseAllowedProductIds: [ID!]!
  falseForbiddenProductIds: [ID!]!
  favouriteProductsIds: [ID!]!
  products: UserProduct
  priceQualityProfile: PriceQualityProfile
  nutritionProfile: NutritionProfile
}

type UserProduct {
  id: ID! @unique
  allowed: [Product!]! @relation(name: "UserProductAllowed")
  forbidden: [Product!]! @relation(name: "UserProductForbidden")
}

type CartProduct {
  id: ID! @unique
  total: Float!
  included: [CartProductIncluded!]!
  excluded: [Product!]! @relation(name: "RelationCartProductExcluded")
}

type CartProductIncluded {
  id: ID! @unique
  quantity: Int!
  product: Product!
}

type NutritionProfile {
  id: ID! @unique
  quality: NutritionProfilePrice!,
  famous: NutritionProfileFamous!,
  bio: NutritionProfileBio!,
  healthy: NutritionProfileHealthy!
}

type NutritionProfilePrice {
  id: ID! @unique
  quantityOrQuality: Boolean!
}
type NutritionProfileFamous {
  id: ID! @unique
  quantityOrFamous: Boolean!
}
type NutritionProfileBio {
  id: ID! @unique
  quantityOrBio: Boolean!
}
type NutritionProfileHealthy {
  id: ID! @unique
  quantityOrHealthy: Boolean!
}

enum Gender {
  MALE
  FEMALE
}

enum PriceQualityProfile {
  BEST_PRICE
  BEST_PRICE_QUALITY_RATIO
  BEST_QUALITY
}

enum Role {
  ADMIN
  USER
}
